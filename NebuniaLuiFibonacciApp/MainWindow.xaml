<Window x:Class="NebuniaLuiFibonacci.MainWindow"
        x:Name="ResWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:s="clr-namespace:System;assembly=mscorlib"
        xmlns:local="clr-namespace:NebuniaLuiFibonacciApp"
        xmlns:props="clr-namespace:NebuniaLuiFibonacciApp.Properties"
        xmlns:core="clr-namespace:NebuniaLuiFibonacci.Core;assembly=NebuniaLuiFibonacci"
        DataContext="{Binding RelativeSource={RelativeSource Self}}"
        mc:Ignorable="d"
        Title="Fibonacci App" Height="400" Width="900">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Themes/Generic.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <!--These 2 templates are basic, but they will eventually contain different sets of actions and a more complex layout-->
            <DataTemplate x:Key="RunningProcessActions">
                <Button Command="{Binding RelativeSource={RelativeSource AncestorType=DataGrid},
                                Path=DataContext.StopWorkerCommand}"  CommandParameter="{Binding}"
                        Style="{StaticResource GridButton}"
                        Content="{x:Static props:Resources.StopTaskButton_Text}" />
            </DataTemplate>
            <DataTemplate x:Key="NotStartedProcessActions">
                <Button Command="{Binding RelativeSource={RelativeSource AncestorType=DataGrid},
                                Path=DataContext.StartWorkerCommand}"  CommandParameter="{Binding}"
                        Style="{StaticResource GridButton}"
                        Content="{x:Static props:Resources.StartTaskButton_Text}" />
            </DataTemplate>
            <ObjectDataProvider x:Key="dataFromEnum" MethodName="GetValues"
                            ObjectType="{x:Type s:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="core:ProcessorType"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
        </ResourceDictionary>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="3*" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Orientation="Vertical" Width="Auto">
            <TextBlock Text="{x:Static props:Resources.MainWindow_Header}" Style="{StaticResource HeaderTextBlock}" />
        </StackPanel>

        <DataGrid  Grid.Row="1" Grid.Column="0" ItemsSource="{Binding LiveFibonacciProcesses,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                    Style="{StaticResource BasicGrid}" MaxHeight="275" Width="Auto"  Margin="10 15"
                   SelectionMode="Single" AutoGenerateColumns="False" Focusable="False" >

            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Status}" Value="{x:Static core:ProcessorState.Unactivated}">
                            <Setter Property="Background" Value="{StaticResource DefaultDataGridRowBrush}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Status}" Value="{x:Static core:ProcessorState.Running}">
                            <Setter Property="Background" Value="{StaticResource FocusedDataGridRowBrush}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>

            <DataGrid.Columns>
                <DataGridTemplateColumn Header="{x:Static props:Resources.FibDataGrid_Column_FirstTerm}" Width="2*"  IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Process.PenultimateTerm}" IsEnabled="False" 
                                           Style="{StaticResource BaseTextBlock}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{x:Static props:Resources.FibDataGrid_Column_SecondTerm}" Width="1.5*"  IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Process.LastTerm}" IsEnabled="False" 
                                          Style="{StaticResource BaseTextBlock}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{x:Static props:Resources.FibDataGrid_Column_OriginalFirstTerm}" Width="2*"  IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Process.OriginalFirstTerm}" IsEnabled="False" 
                                           Style="{StaticResource BaseTextBlock}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{x:Static props:Resources.FibDataGrid_Column_OriginalSecondTerm}" Width="2*"  IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Process.OriginalSecondTerm}" IsEnabled="False" 
                                           Style="{StaticResource BaseTextBlock}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{x:Static props:Resources.FibDataGrid_Column_State}" Width="2.5*"  IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Status}" IsEnabled="False" 
                                           Style="{StaticResource BaseTextBlock}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{x:Static props:Resources.FibDataGrid_Column_Actions}" Width="2*" IsReadOnly="True">
                    <DataGridTemplateColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Status}" Value="{x:Static core:ProcessorState.Running}">
                                    <Setter Property="ContentTemplate" Value="{StaticResource RunningProcessActions}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=Status}" Value="{x:Static core:ProcessorState.Unactivated}">
                                    <Setter Property="ContentTemplate" Value="{StaticResource NotStartedProcessActions}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTemplateColumn.CellStyle>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
        <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Vertical" Width="Auto" Margin="5 5" MaxWidth="175">
            <StackPanel DataContext="{Binding FibonacciProcess}"  Orientation="Vertical" HorizontalAlignment="Center" Width="Auto">

                <TextBlock Text="{x:Static props:Resources.FirstTermInput_Label}" Style="{StaticResource InputFieldLabel}" />
                <TextBox Name="FirstTermTextBox" Style="{StaticResource InputField}"
                         Text="{Binding FirstTerm, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, NotifyOnValidationError=True, UpdateSourceTrigger=PropertyChanged}" />

                <TextBlock Text="{x:Static props:Resources.SecondTermInput_Label}" Style="{StaticResource InputFieldLabel}" />
                <TextBox Name="SecondTermTextBox" Style="{StaticResource InputField}"
                         Text="{Binding SecondTerm, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, NotifyOnValidationError=True, UpdateSourceTrigger=PropertyChanged}" />

                <TextBlock Text="{x:Static props:Resources.ProcessorSelectionInput_Label}" Style="{StaticResource InputFieldLabel}" />
                <ComboBox Name="WorkerTypeComboBox" ItemsSource="{Binding Source={StaticResource dataFromEnum}}"
                    SelectedItem="{Binding WorkerType}"  Style="{StaticResource BasicComboBox}" />
            </StackPanel>
            <Button Command="{Binding CreateWorkerCommand}"
                    Content="{x:Static props:Resources.RunProcessButton_Label}">
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource SaveButton}">
                        <Setter Property="IsEnabled" Value="false" />
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=FirstTermTextBox, Path=(Validation.HasError)}" Value="false" />
                                    <Condition Binding="{Binding ElementName=SecondTermTextBox, Path=(Validation.HasError)}" Value="false" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="true" />
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </StackPanel>
    </Grid>
</Window>
